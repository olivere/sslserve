worker_processes auto;

events {
  worker_connections 1024;
}

http {
    gzip          on;
    sendfile      on;
    tcp_nopush    on;
    tcp_nodelay   on;
    server_tokens off;

    # Redirect all HTTP traffic to HTTPS
    server {
        server_name localhost;
        listen 80;
        listen [::]:80;

        # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
        return 301 https://$host$request_uri;
    }

    # SSL configuration
    server {
        server_name localhost;
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
        ssl_certificate /etc/nginx/localhost.crt;
        ssl_certificate_key /etc/nginx/localhost.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        # modern configuration. tweak to your needs.
        ssl_protocols TLSv1.2;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
        ssl_prefer_server_ciphers on;

        # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
        add_header Strict-Transport-Security max-age=15768000;

        # OCSP Stapling ---
        # fetch OCSP records from URL in ssl_certificate and cache them
        # ssl_stapling on;
        # ssl_stapling_verify on;

        ## verify chain of trust of OCSP response using Root CA and Intermediate certs
        # ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

        # Docker starts a DNS resolver at 127.0.0.11 by default.
        # We use that so we get a new IP for host "service" by round-robin.
        resolver 127.0.0.11 valid=30s;

        # Specify the backend here.
        set $http_backend "http://service:3000";

        # Check for maintenance page
        if (-f $document_root/maintenance.html) {
            return 503;
        }
        error_page 503 @maintenance;
        location @maintenance {
            rewrite  ^(.*)$  /maintenance.html last;
            break;
        }
        location / {
            proxy_pass $http_backend; # we use the variable here
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        # Proxying WebSockets
        location /ws {
            proxy_pass $http_backend; # we use the variable here
            proxy_set_header Upgrade    $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}
